DECLARE DDATE DATE DEFAULT '2025-05-01';
DECLARE protect_to DATE DEFAULT '2025-06-10';

--ALL PRODUCTS FOR ALL USERS WITH PREMIUM OR SPORTS ON THE SPECIFIED DATE
WITH BASE AS (
  SELECT
      ACCOUNT_TYPE,
      PROFILE_ID,
      REPORT_DAY,
      COUNTRY_CODE
      REPORTING_PRODUCT_TYPE,
      CASE WHEN PRODUCT = 'BOOST' AND OFFER_NAME IN ('DE_PRM__INDEF__FREE_01063_WOW001226','DE_PRM__INDEF__2_01063_WOW001224') THEN 'BOOST_MIGRATED' ELSE PRODUCT END AS PRODUCT1,
      ACQUISITION_DATE,
      NEW_ACQ_FLAG,
      AR_OFF_FLAG,
      CHURN_FLAG,
      REINSTATE_FLAG,
      REINSTATE_DATE,
      SYSTEM_EVENT,
      EVENT_FROM_DTTM,
      SUBSCRIPTION_PERIOD_START_DTTM,
      BILLING_PARTNER,
      OFFER_NAME,
      OFFER_CATEGORY,
      PH_HOLDING_CATEGORY_SUBS_ONLY,
      OFFER_START_DATE,
      OFFER_END_DATE,
      PCO_DATE,
      PH_HOLDING_CATEGORY_SUBS_AND_FT,
      ACQUISITION_DATE,

  FROM `sdp-sandbox-nowtv-prod.SDP_NOWTV_DI_VIEWS.BFTM3_ALL_LEVELS_STAGE4`
  WHERE COUNTRY_CODE = 'DE'
  AND REPORTING_PRODUCT_TYPE = 'PRODUCT'
  AND REPORT_DAY >= DDATE
  -- AND OFFER_NAME NOT IN ('DE_PRM__INDEF__FREE_01063_WOW001226','DE_PRM__INDEF__2_01063_WOW001224')
  AND BILLING_PARTNER = 'Direct'
  AND ACCOUNT_TYPE NOT IN ('SO','FT','OT')
  AND SUBSCRIPTION_FLAG = 1
),


--PIVOT PRODUCT FIELDS TO CREATE NEW PRODUCT HOLDING SEGMENT WHICH ONLY INCLUDED DIRECT AND NON-MIGRATED PRODUCTS
PIVOTED_INCL_MIGRATED AS (SELECT *, ARRAY_TO_STRING(
    ARRAY(
      SELECT REPLACE(x, 'ENTS', 'ENTERTAINMENT')  FROM UNNEST([BOOST, BOOST_MIGRATED, ENTS, MOVIES, SPORTS]) AS x
      WHERE x IS NOT NULL AND x != ''
    ),
    '+'
  ) AS content_combined FROM 
(SELECT
    PROFILE_ID
    ,REPORT_DAY
    -- ,REPORTING_PRODUCT_TYPE
    ,PRODUCT1
    -- ,PH_HOLDING_CATEGORY_SUBS_ONLY
    -- ,CUSTOMER_SEGMENTS,
FROM BASE)
PIVOT (
    MAX(DISTINCT PRODUCT1)
    FOR PRODUCT1 IN ('BOOST', 'BOOST_MIGRATED','ENTS','MOVIES','SPORTS')
)),



/* CALCULATING SPORTS COMMITTED AND RATECARD FLAG */
BASE_SPORTS AS (
    SELECT
        ACCOUNT_TYPE,
        PROFILE_ID,
        PRODUCT,
        REPORT_DAY,
        ACQUISITION_DATE,
        NEW_ACQ_FLAG,
        AR_OFF_FLAG,
        CHURN_FLAG,
        REINSTATE_FLAG,
        REINSTATE_DATE,
        SYSTEM_EVENT,
        EVENT_FROM_DTTM,
        SUBSCRIPTION_PERIOD_START_DTTM,
        BILLING_PARTNER,
        OFFER_NAME,
        OFFER_CATEGORY,
        PH_HOLDING_CATEGORY_SUBS_ONLY,
        OFFER_START_DATE,
        OFFER_END_DATE,
        PCO_DATE,
        PH_HOLDING_CATEGORY_SUBS_AND_FT,
        ACQUISITION_DATE,
        CASE WHEN DATE_DIFF(CURRENT_DATE(),ACQUISITION_DATE,DAY) <= 30 THEN 'NEW_USER' ELSE NULL END AS PROTECTED_USER,
 
        -- Identify PCO_DATE change points (lag comparison)
        CASE
            WHEN LAG(PCO_DATE) OVER (PARTITION BY PROFILE_ID, PRODUCT ORDER BY REPORT_DAY) != PCO_DATE
            THEN LAG(PCO_DATE) OVER (PARTITION BY PROFILE_ID, PRODUCT ORDER BY REPORT_DAY)
            ELSE NULL
        END AS PCO_DATE_CHANGE_POINT
 
    FROM `sdp-sandbox-nowtv-prod.SDP_NOWTV_DI_VIEWS.BFTM3_ALL_LEVELS_STAGE4`
    WHERE COUNTRY_CODE = 'DE'
      AND REPORTING_PRODUCT_TYPE = 'PRODUCT'
      AND PRODUCT = 'SPORTS'
      AND BILLING_PARTNER = 'Direct'
      AND ACCOUNT_TYPE NOT IN ('SO','FT','OT')
      AND SUBSCRIPTION_FLAG = 1
),
 
BASE2 AS (
    SELECT
        *,
        -- Carry forward last non-null change point to get PREVIOUS_PCO_DATE
        LAST_VALUE(PCO_DATE_CHANGE_POINT IGNORE NULLS) OVER (
            PARTITION BY PROFILE_ID, PRODUCT ORDER BY REPORT_DAY
            ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
        ) AS PREVIOUS_PCO_DATE_RAW
    FROM BASE_SPORTS
),
 

FINAL AS (
    SELECT *,
    --Use current PCO_DATE when there is no previous pco_date
    COALESCE(PREVIOUS_PCO_DATE_RAW, PCO_DATE) AS PREVIOUS_PCO_DATE
FROM BASE2
)
 
,TEST AS (
    SELECT *,
    CASE WHEN OFFER_NAME = 'FULL_PRICE' THEN 'RC'
         WHEN PCO_DATE = OFFER_END_DATE AND DATE_DIFF(PCO_DATE,OFFER_START_DATE,DAY) < 32 THEN 'RC'
         WHEN PCO_DATE = OFFER_END_DATE AND DATE_DIFF(PCO_DATE,OFFER_START_DATE,DAY) >= 32 THEN 'COMMITTED'
         WHEN PCO_DATE <> OFFER_END_DATE AND DATE_DIFF(PCO_DATE,PREVIOUS_PCO_DATE,DAY) BETWEEN 30 AND 31 THEN 'RC'
         WHEN OFFER_NAME = 'DE_DSM__1M__35.98_18074_WOW002623' THEN 'RC'
         ELSE 'COMMITTED'
    END AS CUSTOMER_SEGMENTS,
FROM FINAL
WHERE REPORT_DAY >= DDATE),
 
-- SELECT* 
-- FROM TEST




/*
DEFINE PROTECTED USERS (JOINING FROM 01TH MAY ONWARDS)
*/
PROTECT_BASE AS (
        SELECT 
  PROFILE_ID,
  REPORT_DAY,
  MAX(CASE WHEN PRODUCT = 'SPORTS' THEN NEW_ACQ_FLAG ELSE 0 END) AS New_acq_flag_sports,
  MAX(CASE WHEN PRODUCT = 'SPORTS' THEN REINSTATE_FLAG ELSE 0 END) AS Reinstate_flag_sports,
  
FROM TEST
WHERE PRODUCT = 'SPORTS'
AND REPORT_DAY BETWEEN '2025-05-10'AND protect_to  --protected date
AND (NEW_ACQ_FLAG = 1 OR REINSTATE_FLAG = 1)
AND CUSTOMER_SEGMENTS = 'RC' --protected sport only rc customers
GROUP BY PROFILE_ID,REPORT_DAY
),

PROTECTED_COHORT as (
SELECT *
      ,CASE WHEN (New_acq_flag_sports + Reinstate_flag_sports) = 1 THEN 'SPORTS' 
           ELSE 'UNKNOWN'  END AS PROTECTED_CATEGORY
      ,CASE WHEN (New_acq_flag_sports = 1 OR Reinstate_flag_sports = 1) THEN 'SPORTS' ELSE NULL END AS SPORTS_PROTECTED

FROM PROTECT_BASE
),




--JOIN TO TEST TABLE WHICH CONTAINS SPORT RATECARD/COMMITTED STATUS AND PROTECTED_COHORT
FINAL_TABLE as (
    SELECT 
      B.PROFILE_ID
      ,B.REPORT_DAY
      ,B.content_combined -- CONTAINS PRODUCTS THAT ARE NOT NOT MIGRATED BOOST AND NOT INDIRECT
      ,T.CUSTOMER_SEGMENTS --RATECARD/COMMITTED
      ,P.SPORTS_PROTECTED
      ,LAST_VALUE(SPORTS_PROTECTED IGNORE NULLS) OVER (
            PARTITION BY PROFILE_ID ORDER BY REPORT_DAY
            ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS CONTINUOUS_SPORTS_PROTECTED
      -- ,P.BOOST_PROTECTED
    FROM PIVOTED_INCL_MIGRATED B
    LEFT JOIN TEST T USING(PROFILE_ID,REPORT_DAY)
    LEFT JOIN PROTECTED_COHORT P USING(PROFILE_ID,REPORT_DAY) 
    -- LIMIT 1000
),

REMOVE_PROTECTED AS(
SELECT 
  *
  ,REGEXP_REPLACE(WITHOUT_PROTECTED_SPORTS, r'^\+|\+$', '') AS cleaned_final_holding
FROM  (
      SELECT 
        *
        ,REPLACE(content_combined,COALESCE(CONTINUOUS_SPORTS_PROTECTED,''),'') AS WITHOUT_PROTECTED_SPORTS
      FROM FINAL_TABLE) F

GROUP BY ALL)
,


COHORTS AS (
   SELECT
  *
  ,CASE 
          WHEN cleaned_final_holding  = 'MOVIES' THEN 'FICTION FULL'
          WHEN cleaned_final_holding  = 'ENTERTAINMENT' THEN 'FICTION LITE'
          WHEN cleaned_final_holding  = 'ENTERTAINMENT+MOVIES' THEN 'FICTION FULL'
          WHEN cleaned_final_holding  = 'BOOST_MIGRATED+MOVIES' THEN 'FICTION FULL+PREMIUM UNPAID'
          WHEN cleaned_final_holding  = 'BOOST_MIGRATED+ENTERTAINMENT+MOVIES' THEN 'FICTION FULL+PREMIUM UNPAID'
          WHEN cleaned_final_holding  = 'BOOST+ENTERTAINMENT+MOVIES' THEN 'FICTION FULL+PREMIUM'
          WHEN cleaned_final_holding  = 'SPORTS' THEN 'SPORTS ONLY'
          WHEN cleaned_final_holding  = 'BOOST+SPORTS' THEN 'SPORTS+PREMIUM'
          WHEN cleaned_final_holding  = 'MOVIES+SPORTS' THEN 'MULTI'
          WHEN cleaned_final_holding  = 'ENTERTAINMENT+SPORTS' THEN 'MULTI'
          WHEN cleaned_final_holding  = 'ENTERTAINMENT+MOVIES+SPORTS' THEN 'MULTI'
          WHEN cleaned_final_holding  = 'BOOST+MOVIES+SPORTS' THEN 'MULTI+PREMIUM'
          WHEN cleaned_final_holding  = 'BOOST+ENTERTAINMENT+SPORTS' THEN 'MULTI+PREMIUM'
          WHEN cleaned_final_holding  = 'BOOST+ENTERTAINMENT+MOVIES+SPORTS' THEN 'MULTI+PREMIUM'
          WHEN cleaned_final_holding  = 'BOOST' THEN 'PREMIUM ONLY'
          WHEN cleaned_final_holding  = 'BOOST+ENTERTAINMENT' THEN 'FICTION LITE+PREMIUM'
          WHEN cleaned_final_holding  = 'BOOST+MOVIES' THEN 'FICTION FULL+PREMIUM'
          WHEN cleaned_final_holding  = 'BOOST_MIGRATED+ENTERTAINMENT+SPORTS' THEN 'MULTI+PREMIUM UNPAID'
          WHEN cleaned_final_holding  = 'BOOST_MIGRATED+ENTERTAINMENT+MOVIES+SPORTS' THEN 'MULTI+PREMIUM UNPAID'
          WHEN cleaned_final_holding  = 'BOOST_MIGRATED+ENTERTAINMENT' THEN 'FICTION LITE+PREMIUM UNPAID'
          WHEN cleaned_final_holding  = 'BOOST_MIGRATED+SPORTS' THEN 'SPORTS+PREMIUM UNPAID'
          WHEN cleaned_final_holding  = 'BOOST_MIGRATED+MOVIES+SPORTS' THEN 'MULTI+PREMIUM UNPAID'
          WHEN cleaned_final_holding  = 'BOOST_MIGRATED' THEN 'PREMIUM UNPAID'


          ELSE NULL--this is not the entire fiction base - it is only the sports/boost users that also have fiction, but the sport/boost had to be dropped because they are migrated or protected
      END AS COMMS_CATEGORY
FROM REMOVE_PROTECTED),



--TO split premium_only into w/o product and indirect products
premium_only as (
  SELECT a.*,b.PH_HOLDING_CATEGORY_SUBS_ONLY
  FROM COHORTS a
  LEFT JOIN  (SELECT PROFILE_ID, REPORT_DAY,PH_HOLDING_CATEGORY_SUBS_ONLY
        FROM `sdp-sandbox-nowtv-prod.SDP_NOWTV_DI_VIEWS.BFTM3_ALL_LEVELS_STAGE4`
        WHERE REPORTING_PRODUCT_TYPE = 'PLATFORM'
        AND COUNTRY_CODE = 'DE'
        AND SUBSCRIPTION_FLAG = 1
       ) b ON a.profile_id = b.profile_id and a.REPORT_DAY = b.REPORT_DAY
 
),


FINAL_COHORTS AS (
  SELECT PROFILE_ID,
       REPORT_DAY,
       CONTENT_COMBINED,
       CUSTOMER_SEGMENTS,
       SPORTS_PROTECTED,
       CONTINUOUS_SPORTS_PROTECTED,
       WITHOUT_PROTECTED_SPORTS,
       CLEANED_FINAL_HOLDING,
      CASE WHEN (COMMS_CATEGORY = 'PREMIUM ONLY' AND PH_HOLDING_CATEGORY_SUBS_ONLY IS NULL AND CONTINUOUS_SPORTS_PROTECTED IS NULL ) THEN 'PREMIUM ONLY + W/O PRODUCT'
           WHEN (COMMS_CATEGORY = 'PREMIUM ONLY' AND PH_HOLDING_CATEGORY_SUBS_ONLY IS NOT NULL AND CONTINUOUS_SPORTS_PROTECTED IS NULL) THEN 'PREMIUM ONLY + INDIRECT PRODUCT'
           ELSE COMMS_CATEGORY END AS COMMS_CATEGORY
FROM premium_only
),


BRAZE_GROUPS AS (
SELECT
  B.ExternalProfilerID AS BrazeID
  ,E.PROFILE_ID
  ,E.REPORT_DAY
  ,E.CUSTOMER_SEGMENTS
  ,E.content_combined
  ,E.cleaned_final_holding
  ,E.COMMS_CATEGORY
  ,E.CONTINUOUS_SPORTS_PROTECTED
FROM (SELECT * FROM `sdp-prod-100.sdp_persistent_views.CustomerKeysMapping` where PartnerOrSystemId = 'braze' AND SDPTerritory = 'DE' AND PROVIDER = 'NOWTV') B RIGHT JOIN FINAL_COHORTS E
ON B.PROFILEID = E.PROFILE_ID
)


SELECT DISTINCT CUSTOMER_SEGMENTS, COMMS_CATEGORY, CONTINUOUS_SPORTS_PROTECTED ,COUNT(PROFILE_ID) AS TOTAL 
FROM BRAZE_GROUPS  
WHERE REPORT_DAY = '2025-06-02' 
GROUP BY ALL 
ORDER BY 3,2,1 ASC
